import streamlit as st
from st_audiorec import st_audiorec
import os
import requests

BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # app.py dir
AUDIO_SAVE_PATH = os.path.normpath(os.path.join(BASE_DIR, "..", "audio"))  # audio dir
os.makedirs(AUDIO_SAVE_PATH, exist_ok=True)

# Backend URL
BACKEND_URL = "http://127.0.0.1:8000/predict"

# Page layout and header
st.set_page_config(page_title="Audio Recorder", page_icon="üéôÔ∏è", layout="centered")
st.title("üéôÔ∏è Voice Recognition Application")
st.subheader("Record and Save Your Audio")

# Add sidebar with "About Us"
with st.sidebar:
    st.header("About Us")
    st.write("""
        Ch√†o m·ª´ng ƒë·∫øn v·ªõi ·ª©ng d·ª•ng nh·∫≠n di·ªán gi·ªçng n√≥i c·ªßa ch√∫ng t√¥i!
        ·ª®ng d·ª•ng n√†y ƒë∆∞·ª£c ph√°t tri·ªÉn ƒë·ªÉ h·ªó tr·ª£ vi·ªác ghi √¢m, l∆∞u tr·ªØ v√† nh·∫≠n di·ªán gi·ªçng n√≥i.
        Ch√∫ng t√¥i s·ª≠ d·ª•ng c√¥ng ngh·ªá **Whisper Model** ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c ƒë·ªô ch√≠nh x√°c cao.

        **Li√™n h·ªá:**
        - üìß Email: support@voicerecognition.com
        - üåê Website: [Voice Recognition](https://voicerecognition.com)
    """)

# File uploader for audio files
st.subheader("K√©o v√† th·∫£ file √¢m thanh")
uploaded_file = st.file_uploader("Ch·ªçn m·ªôt file √¢m thanh (ƒë·ªãnh d·∫°ng WAV)", type=["wav"])

if uploaded_file is not None:
    file_path = os.path.join(AUDIO_SAVE_PATH, uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.read())

    st.success(f"‚úÖ File ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng: `{file_path}`")
    st.audio(file_path, format="audio/wav")

    # Process the uploaded file
    if st.button("Nh·∫≠n di·ªán √¢m thanh t·ª´ file ƒë√£ t·∫£i l√™n"):
        with open(file_path, "rb") as audio_file:
            files = {"file": (uploaded_file.name, audio_file, "audio/wav")}
            response = requests.post(BACKEND_URL, files=files)

            if response.status_code == 200:
                result = response.json().get("result", "Kh√¥ng c√≥ k·∫øt qu·∫£")
                st.write("**K·∫øt qu·∫£ nh·∫≠n di·ªán:**", result)
            else:
                st.error("L·ªói khi g·ª≠i file ƒë·∫øn backend")

# Audio recording
st.subheader("Ho·∫∑c ghi √¢m tr·ª±c ti·∫øp")
wav_audio_data = st_audiorec()

if wav_audio_data is not None:
    if len(wav_audio_data) > 44:
        st.success("üéâ Ghi √¢m th√†nh c√¥ng! ƒêang ph√°t l·∫°i √¢m thanh...")
        file_path = os.path.join(AUDIO_SAVE_PATH, "recorded_audio.wav")

        if st.button("L∆∞u file √¢m thanh"):
            # L∆∞u file √¢m thanh
            with open(file_path, "wb") as f:
                f.write(wav_audio_data)

            st.success(f"‚úÖ File ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng t·∫°i: `{file_path}`")
            st.audio(file_path, format="audio/wav")

        # Ki·ªÉm tra n·∫øu n√∫t nh·∫≠n di·ªán ƒë∆∞·ª£c b·∫•m
        if st.button("Nh·∫≠n di·ªán √¢m thanh t·ª´ ghi √¢m"):
            if os.path.exists(file_path):  # ƒê·∫£m b·∫£o file ƒë√£ ƒë∆∞·ª£c l∆∞u
                with open(file_path, "rb") as audio_file:
                    files = {"file": ("recorded_audio.wav", audio_file, "audio/wav")}
                    response = requests.post(BACKEND_URL, files=files)

                    if response.status_code == 200:
                        result = response.json().get("result", "Kh√¥ng c√≥ k·∫øt qu·∫£")
                        st.write("**K·∫øt qu·∫£ nh·∫≠n di·ªán:**", result)
                    else:
                        st.error("L·ªói khi g·ª≠i file ƒë·∫øn backend")
            else:
                st.warning("‚ö†Ô∏è Vui l√≤ng l∆∞u file √¢m thanh tr∆∞·ªõc khi nh·∫≠n di·ªán.")
    else:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ghi √¢m h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
else:
    st.info("‚ÑπÔ∏è Vui l√≤ng nh·∫•n **'Start Recording'** v√† n√≥i v√†o micro.")

# Footer
st.markdown("---")
st.caption("·ª®ng d·ª•ng nh·∫≠n di·ªán gi·ªçng n√≥i d·ª±a tr√™n Whisper Model")
